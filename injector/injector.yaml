apiVersion: v1
kind: ConfigMap
metadata:
  name: http-header-injector-config
data:
  sidecarconfig.yaml: |
    initContainers:
      - name: http-header-proxy-init
        image: 672574731473.dkr.ecr.eu-west-1.amazonaws.com/dev:proxy-init-latest
        imagePullPolicy: Always
        command: ["/init-iptables.sh"]
        env:
          - name: PROXY_PORT
            value: {% if index .Annotations "config.http-header-injector.stackstate.io/proxy-port" %}"{% index .Annotations "config.http-header-injector.stackstate.io/proxy-port" %}"{% else %}"7060"{% end %}
          - name: PROXY_UID
            value: {% if index .Annotations "config.http-header-injector.stackstate.io/proxy-uid" %}"{% index .Annotations "config.http-header-injector.stackstate.io/proxy-uid" %}"{% else %}"2103"{% end %}    
          - name: POD_HOST_NETWORK
            value: {% .Spec.HostNetwork %}
          {% if eq (index .Annotations "linkerd.io/inject") "enabled" %} 
          - name: LINKERD
            value: true
          # Reference: https://linkerd.io/2.13/reference/proxy-configuration/  
          - name: LINKERD_PROXY_UID
            value: {% if index .Annotations "config.linkerd.io/proxy-uid" %}"{% index .Annotations "config.linkerd.io/proxy-uid" %}"{% else %}"2102"{% end %} 
          # Due to https://github.com/linkerd/linkerd2/issues/10981 this is now not realy possible, still bringing in the code for future reference    
          - name: LINKERD_ADMIN_PORT
            value: {% if index .Annotations "config.linkerd.io/admin-port" %}"{% index .Annotations "config.linkerd.io/admin-port" %}"{% else %}"4191"{% end %}
          {% end %}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
              - NET_ADMIN
              - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - mountPath: /run
            name: http-header-proxy-init-xtables-lock
    
    containers:
      - name: http-header-proxy
        image: 672574731473.dkr.ecr.eu-west-1.amazonaws.com/dev:proxy-latest
        imagePullPolicy: Always
        env:
          - name: PORT
            value: {% if index .Annotations "config.http-header-injector.stackstate.io/proxy-port" %}"{% index .Annotations "config.http-header-injector.stackstate.io/proxy-port" %}"{% else %}"7060"{% end %}
        securityContext:
          runAsUser: {% if index .Annotations "config.http-header-injector.stackstate.io/proxy-uid" %}{% index .Annotations "config.http-header-injector.stackstate.io/proxy-uid" %}{% else %}2103{% end %}
          seccompProfile:
            type: RuntimeDefault
      - name: http-header-inject-debug
        image: 672574731473.dkr.ecr.eu-west-1.amazonaws.com/dev:proxy-init-latest
        imagePullPolicy: Always
        command: ["/bin/sh", "-c", "while echo \"Running\"; do sleep 1; done"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
              - NET_ADMIN
              - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - mountPath: /run
            name: http-header-proxy-init-xtables-lock      

    volumes:
      - emptyDir: {}
        name: http-header-proxy-init-xtables-lock

  mutationconfig.yaml: |
    mutationConfigs:
      - name: "http-header-injector"
        annotationNamespace: "http-header-injector.stackstate.io"
        annotationTrigger: "inject"
        annotationConfig:
          volumeMounts: []
        initContainersBeforePodInitContainers: [ "http-header-proxy-init" ]
        initContainers: [ "http-header-proxy-init" ]
        containers: [ "http-header-proxy" ]
        volumes: [ "http-header-proxy-init-xtables-lock" ]
        volumeMounts: [ ]
        ignoreNamespaces: [ ]
      - name: "http-header-injector-debug"
        annotationNamespace: "http-header-injector-debug.stackstate.io"
        annotationTrigger: "inject"
        annotationConfig:
          volumeMounts: []
        initContainersBeforePodInitContainers: [ ]
        initContainers: [ ]
        containers: [ "http-header-inject-debug"  ]
        volumes: [ "http-header-proxy-init-xtables-lock" ]
        volumeMounts: [ ]
        ignoreNamespaces: [ ]
---
apiVersion: v1
kind: Secret
metadata:
  name: http-header-injector-certs
data:
  tls.crt: $TLS_CRT
  tls.key: $TLS_KEY
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: http-header-injector
  name: http-header-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: http-header-injector
  template:
    metadata:
      labels:
        app: http-header-injector
      name: http-header-injector
    spec:
      volumes:
        - name: http-header-injector-config
          configMap:
            name: http-header-injector-config
        - name: http-header-injector-certs
          secret:
            secretName: http-header-injector-certs
      containers:
        - image: 672574731473.dkr.ecr.eu-west-1.amazonaws.com/dev:generic-sidecar-injector-latest
          name: http-header-injector
          volumeMounts:
            - mountPath: /etc/webhook/config
              name: http-header-injector-config
            - name: http-header-injector-certs
              mountPath: /etc/webhook/certs
              readOnly: true
          command: [ "/sidecarinjector" ]
          args:
            - --port=8443
            - --sidecar-config-file=/etc/webhook/config/sidecarconfig.yaml
            - --mutation-config-file=/etc/webhook/config/mutationconfig.yaml
            - --cert-file-path=/etc/webhook/certs/tls.crt
            - --key-file-path=/etc/webhook/certs/tls.key
---
apiVersion: v1
kind: Service
metadata:
  name: http-header-injector
spec:
  ports:
    - port: 8443
      protocol: TCP
      targetPort: 8443
  selector:
    app: http-header-injector
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: http-header-injector-webhook
webhooks:
  - clientConfig:
      caBundle: $CABUNDLE
      service:
        name: http-header-injector
        path: /mutate
        namespace: injector
        port: 8443
    failurePolicy: Fail
    name: http-header-injector-webhook.stackstate.io
    namespaceSelector:
      matchExpressions:
        - key: http-header-injector
          operator: NotIn
          values: ["disabled"]
        - key: injector
          operator: NotIn
          values: [ "disabled" ]
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
            - kube-system
            - cert-manager
            - injector
            - http-header-injector
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
    admissionReviewVersions:
      - v1