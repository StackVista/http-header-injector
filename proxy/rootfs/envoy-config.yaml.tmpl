admin:
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 15000

static_resources:
  listeners:

    # Setup a TCP listener on port $PORT
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: $PORT
      traffic_direction: OUTBOUND
      filter_chains:
        # Two chains. The 'most specific chain' will match the traffic.
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                generate_request_id: true
                always_set_request_id_in_response: true
                stat_prefix: http
                route_config:
                  name: default
                  virtual_hosts:
                    - name: default
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: /
                          route:
                            cluster: original_destination_cluster
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        # Traffic class, this will tell whether traffic was classified as http or tcp
                        proxy.traffic.class: "http"
                        client.local.address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                        upstream.remote.address: "%UPSTREAM_REMOTE_ADDRESS%"
                        http.request.headers.id: "%REQ(X-REQUEST-ID)%"
                        http.response.code: "%RESPONSE_CODE%"
                        http.response.headers.id: "%RESP(X-REQUEST-ID)%"
          filterChainMatch:
            applicationProtocols:
              - http/1.0
              - http/1.1
              - h2
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp
                cluster: original_destination_cluster
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/dev/stdout"
                      typed_json_format:
                        "@timestamp": "%START_TIME%"
                        # Traffic class, this will tell whether traffic was classified as http or tcp
                        proxy.traffic.class: "tcp"
                        client.local.address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                        upstream.remote.address: "%UPSTREAM_REMOTE_ADDRESS%"
      listener_filters:
        - name: envoy.filters.listener.original_dst
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
        - name: "envoy.filters.listener.http_inspector"
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector

  # Setup the Original Destination cluster
  clusters:
    - name: original_destination_cluster
      type: ORIGINAL_DST
      connect_timeout: 6s
      lb_policy: CLUSTER_PROVIDED

cluster_manager: {}